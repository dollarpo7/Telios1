trigger:
    batch: true
    branches:
      include: 
      - master
variables:
   buildConfiguration: 'Release'
   azureSubscription: 'Azure Pass - Sponsorship(44c254f7-5162-4fcc-8105-3660b0b461ba)'
   WebAppName: 'teliosPortal'
   ResourceGroupName: 'Telios'
    
stages:
  
  # Build Stage
  - stage: BuildAndTest
    jobs:
    - job: BuildAndTest
      pool:
        vmImage: 'Ubuntu-18.04'
      steps:
      # Build and publish the application library
      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: restore
          projects: '**/*.csproj'
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration)'
      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish'
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      # Publish the app as an artifact
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: teliosapp
      
      - script: |
         cd $(Build.ArtifactStagingDirectory)
         tree -a

  # Staging release
  - stage: Staging
    jobs:
    - job: Release
      pool:
        vmImage: 'Ubuntu-18.04'
      steps:
      # Don't clone the repo
      - checkout: none
  
      # Download the published application artifact
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          targetPath: '$(Pipeline.Workspace)'
      
      - script: 
         ls -a

      # Release the app
      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: '$(azureSubscription)'
          appType: 'webApp'
          WebAppName: '$(WebAppName)'
          deployToSlotOrASE: true
          ResourceGroupName: '$(ResourceGroupName)'
          SlotName: 'Dev'
          packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

      - task: AzureAppServiceManage@0
        inputs:
          azureSubscription: $(azureSubscription)
          Action: 'Swap Slots'
          WebAppName: $(WebAppName)
          ResourceGroupName: $(ResourceGroupName)
          SourceSlot: 'Dev'
          PreserveVnet: true

  